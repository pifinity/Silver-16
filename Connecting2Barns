import java.io.*;
import java.util.*;

public class ConnectingTwoBarns {

    static ArrayList<ArrayList<Integer>> comps;
    static ArrayList<Integer>[] graph;
    static boolean[] visited;
    static ArrayList<Integer> conComp;



    static void dfs(int node){
        if (visited[node]) return;
        visited[node] = true;
        conComp.add(node);


        for (int i : graph[node]){
            dfs(i);
        }
    }

    static long compare(ArrayList<Integer> a, ArrayList<Integer> b){
        long output = Long.MAX_VALUE;
        for (int  i : a){
            int nearest = Collections.binarySearch(b, i);


            if (nearest>=0){
                return 0;
            }else{
                int loIndex = nearest*-1-2;

         /*       if (loIndex==2){
                    System.out.println(nearest);
                }

          */
                long a1 = Long.MAX_VALUE;

                if (loIndex>=0){
                    a1 = Math.abs(i-b.get(loIndex));
                }


                if (loIndex+1<b.size()){
                    int temp = Math.abs(i-b.get(loIndex+1));
                    a1 = Math.min(a1, temp);
                }
                a1 = a1*a1;
                output = Math.min(output, a1);
            }

        }
        return output;
    }




    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));


        int T = Integer.parseInt(bf.readLine());

        for (int i=0; i<T; i++){
            StringTokenizer st = new StringTokenizer(bf.readLine());
            int N = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());
            graph = new ArrayList[N+1];
            visited = new boolean[N+1];
            comps = new ArrayList<ArrayList<Integer>>();
            conComp = new ArrayList<>();

            for (int j=1; j<=N; j++){
                graph[j] = new ArrayList<>();
            }

            for (int j=1; j<=M; j++){
                st = new StringTokenizer(bf.readLine());
                int a = Integer.parseInt(st.nextToken());
                int b = Integer.parseInt(st.nextToken());

                graph[a].add(b);
                graph[b].add(a);
            }

            conComp.clear();
            dfs(1);
            if (visited[N]){
                System.out.println(0);
                continue;
            }

            ArrayList<Integer> comp1 = new ArrayList<Integer>(conComp);
            Collections.sort(comp1);
            conComp.clear();
            dfs(N);

            ArrayList<Integer> comp2 = new ArrayList<Integer>(conComp);
            Collections.sort(comp2);

            for (int j=1; j<=N; j++){
                if (!visited[j]){
                    conComp.clear();
                    dfs(j);
                    ArrayList<Integer> temp = new ArrayList<Integer>(conComp);
                    comps.add(temp);
                }
            }

          /*  System.out.println(i);
            System.out.println(comp1);
            System.out.println(comp2);
            for (ArrayList<Integer> j : comps){
                System.out.println(j);
            }

         */

            PriorityQueue<Long> q = new PriorityQueue<>();

            q.offer(compare(comp1, comp2));

            for (ArrayList<Integer> j : comps){
                long a = compare(j, comp1);
                long b = compare(j, comp2);
                q.offer(a+b);
            }
            System.out.println(q.poll());

        }
    }
 }
